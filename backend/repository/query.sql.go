// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT 
    id, status, created_at, completed_at, restarts
FROM task
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskById(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Restarts,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT
    id, status, created_at, completed_at, restarts
FROM task
WHERE $3::task_status IS NULL
OR status in ($3::task_status)
ORDER BY created_at, status DESC
LIMIT $1 OFFSET $2
`

type GetTasksParams struct {
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
	Status NullTaskStatus `json:"status"`
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasks, arg.Limit, arg.Offset, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Restarts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUncompletedTasks = `-- name: GetUncompletedTasks :many
SELECT
    id, status, created_at, completed_at, restarts
FROM task
WHERE status != 'completed' 
ORDER BY created_at, status DESC
LIMIT $1 OFFSET $2
`

type GetUncompletedTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUncompletedTasks(ctx context.Context, arg GetUncompletedTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getUncompletedTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Restarts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newTask = `-- name: NewTask :one
INSERT INTO task
DEFAULT VALUES
RETURNING id, status, created_at, completed_at, restarts
`

func (q *Queries) NewTask(ctx context.Context) (Task, error) {
	row := q.db.QueryRow(ctx, newTask)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Restarts,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE task
SET status = $1, completed_at = $2, restarts = $3
WHERE id = $4
RETURNING id, status, created_at, completed_at, restarts
`

type UpdateTaskParams struct {
	Status      TaskStatus       `json:"status"`
	CompletedAt pgtype.Timestamp `json:"completedAt"`
	Restarts    pgtype.Int4      `json:"restarts"`
	ID          pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Status,
		arg.CompletedAt,
		arg.Restarts,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Restarts,
	)
	return i, err
}
